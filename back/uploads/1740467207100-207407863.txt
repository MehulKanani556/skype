**********login.js 
	- handleLogin
=> const handleLogin = async () => {
    console.log(email, password);
    // const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    try {
      const response = await axios.post(`${apiUrl}/auth/login`, {
        email,
        password
      },
      );

      console.log(response.data);
      if (response.data.access_token) {
        const { email, name, access_token, role, id } = response.data;
        sessionStorage.setItem("email", email);
        sessionStorage.setItem("name", name);
        sessionStorage.setItem("token", access_token);
        sessionStorage.setItem("role", role);
        sessionStorage.setItem("userId", id);

        setSuccessMessage("iniciar sesión exitosamente");
        setShowSuccessModal(true);

        setTimeout(() => {
          setShowSuccessModal(false);
          const redirectPath = location?.state?.from || '/dashboard';
          navigate(redirectPath);
        }, 2000);

        setEmail("");
        setPassword("");
      } else {
        setErrorMessage(response.data.message || "Credenciales inválidas"  );
        setShowModal(true);
      }
    } catch (error) {
      setErrorMessage(error.response.data.message);
      setShowModal(true);
    }
  };
	
*******articles.js
	- handleFileChange
=> const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const allowedTypes = ['image/svg+xml', 'image/png', 'image/jpeg', 'image/gif'];
      const fileType = file.type;
  
      if (!allowedTypes.includes(fileType)) {
        setErrorMessages((prevErrors) => ({
          ...prevErrors,
          image: "El tipo de archivo debe ser SVG, PNG, JPG o GIF"
        }));
        setSelectedFile(null);
      } else if (file.size > 2 * 1024 * 1024) {
        setErrorMessages((prevErrors) => ({
          ...prevErrors,
          image: "El tamaño de la imagen no puede superar los 2 MB"
        }));
        setSelectedFile(null);
      } else {
        setSelectedFile(file);
        setErrorMessages((prevErrors) => ({
          ...prevErrors,
          image: ""
        }));
      }
    }
    setUploadedFile(null);
  };


********singleArticle.js
- validate 
=>  if (!formDetails.image && !formDetails.existingImage) {
      errors.image = "Se requiere una imagen";
    } else if (formDetails.image && formDetails.image.size > 2 * 1024 * 1024) {
      errors.image = "El tamaño de la imagen debe ser inferior a 2 MB.";
    } else if (formDetails.image) {
      const allowedTypes = ['image/jpeg', 'image/svg+xml', 'image/png', 'image/gif'];
      if (!allowedTypes.includes(formDetails.image.type)) {
        errors.image = "El tipo de archivo no es válido. Solo se permiten archivos jpg, svg, png y gif.";
      }
    }


******** Counter_finalp.js
- for tip 
=>  
  const [tipError, setTipError] = useState(""); 

 const handleClose = () => {
    setShow(false);
    setTipError("");
  };

<Modal
                show={show}
                onHide={handleClose}
                backdrop={true}
                keyboard={false}
                className="m_modal jay-modal"
              >
                <Modal.Header
                  closeButton
                  className="m_borbot b_border_bb mx-3 ps-0"
                >
                  <Modal.Title className="j-tbl-text-10">
                    Agregar propina
                  </Modal.Title>
                </Modal.Header>
                <Modal.Body className="border-0 pb-0 ">
                  <div className="mb-3">
                    <label
                      htmlFor="exampleFormControlInput1"
                      className="form-label j-tbl-font-11"
                    >
                      Cantidad
                    </label>
                    <input
                      type="text"
                      className="form-control j-table_input"
                      id="exampleFormControlInput1"
                      value={`$${price}`}
                      onChange={handleprice}
                    />
                     {tipError && <p className="text-danger mt-2 errormessage">{tipError}</p>}
                  </div>
                </Modal.Body>
                <Modal.Footer className="border-0 pt-0">
                  <Button
                    className="j-tbl-btn-font-1 b_btn_pop"
                    variant="primary"
                    onClick={() => {
                      if (!price || parseFloat(price) <= 0) {
                        setTipError("Por favor, ingrese una cantidad válida para la propina.");
                      } else {
                        setTipError("");
                        handleShowCreSubSuc();
                        handleClose();
                      }
                    }}
                  >
                    Aceptar
                  </Button>
                </Modal.Footer>
              </Modal>



===============akshay==================

CA0062 

********* Informacira.js  

line -- 2269   

 <Link to={`/home_Pedidos/paymet/${user.id}`}>
                                    <button className="sjSky px-2 j-tbl-font-3">
                                      Ver detalles
                                    </button>
                                  </Link> 

******* Home_pedidos_payment.js

line--811


 <div className={`bj-delivery-text-2  b_btn1 mb-2 mt-3 p-0 text-nowrap d-flex  align-items-center justify-content-center 
                              ${orderData?.status.toLowerCase() === 'received' ? 'b_indigo' : orderData?.status.toLowerCase() === 'prepared' ? 'b_ora ' : orderData?.status.toLowerCase() === 'delivered' ? 'b_blue' : orderData?.status.toLowerCase() === 'finalized' ? 'b_green' : orderData?.status.toLowerCase() === 'withdraw' ? 'b_indigo' : orderData?.status.toLowerCase() === 'local' ? 'b_purple' : orderData?.status.toLowerCase() === 'cancelled' ? 'b_ora text-danger' : ''}`}>
                          {orderData?.status.toLowerCase() === 'received' ? 'Recibido' : orderData?.status.toLowerCase() === 'prepared' ? 'Preparado ' : orderData?.status.toLowerCase() === 'delivered' ? 'Entregado' : orderData?.status.toLowerCase() === 'finalized' ? 'Finalizado' : orderData?.status.toLowerCase() === 'withdraw' ? 'Retirar' : orderData?.status.toLowerCase() === 'local' ? 'Local' : orderData?.status.toLowerCase() === 'cancelled' ? 'Cancelada' : ' '}
                        </div>



CA0063 , CA0064

********  Informacira.js

line -- 1139

  <Modal
                        show={showpay}
                        onHide={handleClosepay}
                        backdrop={true}
                        keyboard={false}
                        className="m_modal jay-modal"
                      >
                        <Modal.Header closeButton className="border-0" onClick={()=>{setShowpay(false)}}  />
                        <Modal.Body>
                          <div className="text-center">
                            {/* <img
                              src={require("../Image/check-circle.png")}
                              alt=""
                            /> */}
                            <p className="mb-0 mt-2 h6 j-tbl-pop-1">
                             
                            </p>
                            <p className="opacity-75 j-tbl-pop-2">
                            Panding de pago para este pedid
                            </p>
                          </div>
                        </Modal.Body>
                      </Modal>

line --- 1005 

const handleClosepay = () =>{
    setShowpay(true);
    setTimeout(() => {
      setShowpay(false);
    }, 2000);
    
  }

  const handleorderRecipt = (data) => {

    const payament = allpayments.some((v)=>v.order_master_id == data.id)
    console.log(payament);
    if(payament){
      setShowModalOrder(true)
    }else{
      handleClosepay()
    }
  }

line -- 2424 

  <button className="bg-transparent border-0" onClick={() => {setSelectedOrder(user);handleorderRecipt(user) }}> {/* Update to show modal */}


*************Home_client.Js

CA0097 -- Done

CA0102 -- Done

CA0103-CA110 - Done

=========24-9-2024=========

CA0061 - Done

CA0111 ----

****** HOME_crear.js

line--- 49

 const [selectedCheckbox, setSelectedCheckbox] = useState("1");

line --- 51

const [activeKey, setActiveKey] = useState("0");


line --- 782

<input
       type="checkbox"
       name="receiptType"
          value="1"
          checked={selectedCheckbox === "1"}
          onChange={() => handleCheckboxChange("1")}
         className="me-2 j-change-checkbox"
        defaultChecked
    />


CA0112 --Done

CA0113 -- Done

CA0114 -- Done

CA0115 -----

*********** Home_detail_no.js

line--14  
import img2 from '../Image/check-circle.png'

line---- 55 

const [showcreditfinal, setShowcreditfinal] = useState(false)


line -- 162 


const handleReturn = () => {
        if (!destination) {
            setError('Ingrese la dirección de retorno');
            return;
        }

        if (!(orderAlldata.some((v) => v.id == destination))) {
            setError('No se encontró la orden de compra');
            return;
        }

        setIsProcessing(true);
        axios
            .post(
                `${apiUrl}/order/getCreditUpdate/${creditNote.id}`,
                {
                    status: "Completed",
                    destination: destination
                },
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                }
            )
            .then((response) => {
                console.log(response.data);
                setIsProcessing(false);

                setShowcreditfinal(true);
                setTimeout(() => {
                    setShowcreditfinal(false);
                    navigate('/home/client/detail', {
                        replace: true,
                        state,
                    });
                }, 2000);
                 
            })
            .catch((error) => {
                console.error(error);
                setIsProcessing(false);
                setError('Hubo un error al intentar realizar el retorno');
            });
            setError(null)
    }


line --- 395 


   {/* {====== credit modal =======} */}

            <Modal
                show={showcreditfinal}
                onHide={() => setShowcreditfinal(false)}
                backdrop="static"
                keyboard={false}
                className="m_modal"
            >
                <Modal.Header closeButton className="border-0" />
                <Modal.Body className="text-center" style={{ backgroundColor: "#1F2A37" }}>
                    <div className='m-auto'>
                        <img src={img2} height={100} width={100} alt="" />
                    </div>
                    <h4 className='j-tbl-pop-1 mb-0'>nota de crédito atualizada</h4>
                    <p className='j-tbl-pop-2'>crédito aplicado con éxito al {destination} pedido</p>
                </Modal.Body>
            </Modal>


CA0116 -to CA0118 - Done


CA0141 -- Done but point to be review

CA0149- to CA00151 Condition for type of user access
	read this point...




 52,---Done not clear ask to nikhil

 61-- Done

 82-solve

	table
	CA0134
	CA0135
	CA0136
	CA0137
	CA0138
	CA0139

************** tablenformation.js

line----1324



          {/* {/ Edit Tables/} */}
          <Modal
            show={showEdittable}
            onHide={handleCloseEdittable}
            backdrop={true}
            keyboard={false}
            className="m_modal jay-modal"
          >
            <Modal.Header
              closeButton
              className="j-caja-border-bottom p-0 m-3 mb-0 pb-3"
            >
              <Modal.Title className="j-tbl-text-12">Editar mesa</Modal.Title>
            </Modal.Header>
            <Modal.Body className="border-0">
              <div className="mb-3">
                <label
                  htmlFor="exampleFormControlInput1"
                  className="form-label j-tbl-btn-font-1"
                >
                  Nombre
                </label>
                <input
                  type="text"

                  className="form-control j-table_input"
                  id="exampleFormControlInput1"
                  placeholder={tableData?.name}
                  value={tableName}
                  name="name"
                  onChange={handleEditChange}
                />
                {editErrorName && (
                  <div className="text-danger errormessage">
                    {editErrorName}
                  </div>
                )}
              </div>
            </Modal.Body>
            <Modal.Footer className="border-0">
              <Button
                className="j-tbl-btn-font-1 b_btn_close  "
                variant="danger"
                onClick={() => {
                  handleDeleteClick();
                }}
              >
                Eliminar
              </Button>
              <Button
                className="j-tbl-btn-font-1 b_btn_pop"
                variant="primary"
                onClick={handleEditSubmit}
              >
                Guardar cambios
              </Button>
            </Modal.Footer>
          </Modal>

          {/* delete confirm */}
          <Modal
            show={showDeleteConfirm}
            onHide={() => setShowDeleteConfirm(false)}
            backdrop={true}
            keyboard={false}
            className="m_modal jay-modal"
          >
            <Modal.Header closeButton className="border-0" onClick={() => setShowDeleteConfirm(false)} />
            <Modal.Body className="border-0">
              <div className="text-center">
                <img
                  src={require("../Image/trash-outline-secondary.png")}
                  alt=" "
                />
                <p className="mb-0 mt-3 h6">
                  {" "}
                  ¿Está seguro de que desea eliminar esta mesa?
                </p>
              </div>
            </Modal.Body>
            <Modal.Footer className="border-0 ">
              <Button
                className="j-tbl-btn-font-1 b_btn_close"
                variant="danger"
                onClick={handleDeleteConfirmation} // Confirm deletion
              >
                Sí, seguro
              </Button>
              <Button
                className="j-tbl-btn-font-1"
                variant="secondary"
                onClick={() => { setShowDeleteConfirm(false) }} // Cancel deletion
              >
                No, cancelar
              </Button>
            </Modal.Footer>
          </Modal>

          {/* {/ edit Table eliminate /} */}
          <Modal
            show={showEditFamDel}
            onHide={handleCloseEditFamDel}
            backdrop={true}
            keyboard={false}
            className="m_modal jay-modal"
          >
            <Modal.Header closeButton className="border-0" />
            <Modal.Body>
              <div className="j-modal-trash text-center">
                <img src={require("../Image/trash-outline.png")} alt="" />
                <p className="mb-0 mt-3 h6 j-tbl-pop-1">Mesa eliminado</p>
                <p className="opacity-75 j-tbl-pop-2">
                  El Mesa ha sido eliminado correctamente
                </p>
              </div>
            </Modal.Body>
          </Modal>

          {/* {/ edit family success /}  */}
          <Modal
            show={showEditFamSuc}
            onHide={handleCloseEditFamSuc}
            backdrop={true}
            keyboard={false}
            className="m_modal jay-modal"
          >
            <Modal.Header closeButton className="border-0" onClick={() => { setShowEditFamSuc(false) }} />
            <Modal.Body>
              <div className="text-center">
                <img src={require("../Image/check-circle.png")} alt="" />
                <p className="mb-0 mt-2 h6 j-tbl-pop-1">Cambios Mesa</p>
                <p className="opacity-75 j-tbl-pop-2">
                  Se ha modificado exitosamente
                </p>
              </div>
            </Modal.Body>
          </Modal>

          {/* processing */}
          <Modal
            show={isProcessing}
            keyboard={false}
            backdrop={true}
            className="m_modal  m_user "
          >
            <Modal.Body className="text-center">
              <Spinner animation="border" role="status" style={{ height: '85px', width: '85px', borderWidth: '6px' }} />
              <p className="mt-2">Procesando solicitud...</p>
            </Modal.Body>
          </Modal>



line----592  


 const [showEdittable, setShowEdittable] = useState(false);

  const handleCloseEdittable = () => setShowEdittable(false);
  const handleShowEdittable = () => setShowEdittable(true);

  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);

  const [showEditFamDel, setShowEditFamDel] = useState(false);
  const handleCloseEditFamDel = () => setShowEditFamDel(false);

  const handleShowEditFamDel = () => {
    setShowEditFamDel(true);
    setTimeout(() => {
      setShowEditFamDel(false);
      navigate("/table")
    }, 2000);
  };

  // edit table Success
  const [showEditFamSuc, setShowEditFamSuc] = useState(false);
  const handleCloseEditFamSuc = () => setShowEditFamSuc(false);
  const handleShowEditFamSuc = () => {
    setShowEditFamSuc(true);
    setTimeout(() => {
      setShowEditFamSuc(false);
    }, 2000);
  };

  const [tableName, setTableName] = useState(null);
  const [editErrorName, setEditErrorsName] = useState('');
  //edit table
  const handleEditChange = (e) => {
    const name = e.target.value;
    setTableName(name);
    if (name) {
      setEditErrorsName('');
    }
  };

  const handleEditSubmit = async () => {

    if (!tableName) {
      setEditErrorsName("Debe ingresar un nombre de mesa.");
      return
    }

    handleCloseEdittable();
    setIsProcessing(true)
    try {
      const response = await axios.post(
        `${apiUrl}/table/updateTableName`,
        {
          table_id: tId,
          name: tableName
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json"
          }
        }

      );
      if (response.status == 200) {
        setTableName(null)
        setIsProcessing(false);
        handleShowEditFamSuc();
        gettableData();
        // getSector();
        // getSectorTable(); 
      }
    } catch (error) {
      console.error("Error updating sector:", error);
      alert("Failed to update sector. Please try again.");
    }
  }

  const handleDeleteClick = () => {
    console.log(tId);
    setShowDeleteConfirm(true); // Show confirmation modal
    handleCloseEdittable();
  }

  const handleDeleteConfirmation = async () => {

    if (tId) {
      setIsProcessing(true)
      try {
        const response = await axios.delete(
          // `${apiUrl}/order/deleteSingle/${itemToDelete}`,
          `${apiUrl}/table/delete/${tId}`,
          {
            headers: {
              Authorization: `Bearer ${token}`
            }
          }
        );

        if (response.status == 200) {
          setIsProcessing(false);
          setShowDeleteConfirm(false);
          handleShowEditFamDel();
        }


        // getSector();
        // getSectorTable();
        // handleShowEditFamDel();
        // setShowDeleteConfirm(false);
      } catch (error) {
        console.error(
          "Error Delete OrderData:",
          error.response ? error.response.data : error.message
        );
      }
      setIsProcessing(false);
    }

  }






CA0182--done
CA0183--done
CA0184--done
CA0185--done
CA0186--done

CA097-CA0106/108

Home_details.js

line-650 

<input type="text" className="form-control bg-gray border-0 bj-slimilar-class-why mt-2" id="inputPassword2" placeholder="-" style={{ backgroundColor: '#374151', borderRadius: "10px" }} value={user?.email} />


Home_crear.js

line---967
   <div className="w-75 a_bg_order  border-0 overflow-auto" style={{ borderRadius: "10px" }}><span className="">{userPayment?.email ? userPayment.email : "-"}</span></div>

line-892
  <div className="w-75 a_bg_order border-0 mt-2" style={{ borderRadius: "10px" }}><span className="">{userPayment?.email ? userPayment.email : "-"}</span></div>



some other changes

Home-pedidos_payment_edit.js

 {orderData?.reason &&
<div className='text-white ms-4 pt-4' >
   <h5 className='bj-delivery-text-15'>Nota anulación</h5>
   <textarea type="text" className="form-control bg-gray border-0 mt-4 py-2" id="inputPassword2" placeholder={orderData?.reason != null ? orderData?.reason : "Estaba sin sal"} style={{ backgroundColor: '#242d38', borderRadius: "10px" }} disabled></textarea>
     </div> 
}



CA0112-113 

Home_crear.js

line-1006

  <div className='b_bborder my-3 p-4'>
                                                                        <h5>Tipos de pago</h5>
                                                                        <div className='d-flex justify-content-between'>
                                                                            <div className='mt-3'>
                                                                                {selectedCheckbox == "1" ? "Futura Compra" :
                                                                                    selectedCheckbox == "2" && selectedPaytype ? selectedPaytype : ""}
                                                                            </div>
                                                                            <div>${selectedItems?.reduce((total, v) => total + v.amount * v.quantity, 0)}</div>
                                                                        </div>
                                                                    </div>


Home_detail_no2.js

line-244

 {creditNote?.destination && 
                           <div className='w-100 b_search text-white mb-3'>
                                <label htmlFor="destination">Destino</label>
                                <input type="text" className="form-control bg-gray border-0 py-3 mt-2" value={creditNote?.destination} id="destination" style={{ backgroundColor: '#242d38', borderRadius: "10px" }} readOnly />
                            </div>
                           }
                           {creditNote?.destination == null && 
                           <div className='w-100 b_search text-white mb-3'>
                                <label htmlFor="destination">Tipos de credito</label>
                                <input type="text" className="form-control bg-gray border-0 py-3 mt-2" value={
                                    creditNote?.credit_method == "cash" ? "Efectivo" :
                                    creditNote?.credit_method == "debit" ? "Tarjeta de debito" :
                                    creditNote?.credit_method == "credit" ? "Tarjeta de credito" : ""
                                    } id="destination" style={{ backgroundColor: '#242d38', borderRadius: "10px" }} readOnly />
                            </div>
                           }



CA0141

TableInformation.js

line--863

<input
 type="text"
    className="form-control j-tbl-information-input"
    id="exampleFormControlInput1"
     placeholder="4"
      value={userTableData?.name}
    readOnly
   />




149-Done
150-Done
151-Done

xxxxxxxxxxxxx---Pending -------xxxxxxxxxxx


165---


175--
176--


=====Client side  ======



chat  group
181--client

delivery platform => rappi uber
194
195
196

ui ma nathi


======================== some changes ============
app.css


line---8658

.btn-check:checked+.btn, .btn.active, .btn.show, .btn:first-child:active, :not(.btn-check)+.btn:active {
  border-width: 1px !important;
}


informacira.js


line----2289


 <div className="j-table-information-body">
                    <form className="j_ti_form">
                      <div className="row">
                        <div className="col-6 mb-3 ">
                          <label
                            htmlFor="exampleFormControlInput1"
                            className="form-label text-white j-tbl-font-11"
                          >
                            Nombre caja
                          </label>
                          <input
                            type="text"
                            className="form-control j-tbl-information-input"
                            id="exampleFormControlInput1"
                            placeholder="Damian Lopez"
                            value={boxName[0]?.name}
                            readOnly
                          />
                        </div>
                        <div className="col-6 mb-3">
                          <label
                            htmlFor="exampleFormControlInput1"
                            className="form-label text-white j-tbl-font-11"
                          >
                            Fecha creación
                          </label>
                          <input
                            type="text"
                            className="form-control j-tbl-information-input"
                            id="exampleFormControlInput1"
                            placeholder="20/03/2024"
                            value={boxName[0]?.created_at ? new Date(boxName[0]?.created_at).toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric' }) : ''}
                            readOnly
                          />
                        </div>
                        <div className="col-6 ">
                          <label
                            htmlFor="exampleFormControlInput1"
                            className="form-label text-white j-tbl-font-11"
                          >
                           Cuantas aperturas
                          </label>
                          <input
                            type="text"
                            className="form-control j-tbl-information-input"
                            id="exampleFormControlInput1"
                            placeholder="4"
                            value={data.filter(item => item.open_amount !== null).length}
                            readOnly
                          />
                        </div>
                        <div className="col-6">
                          <label
                            htmlFor="exampleFormControlInput1"
                            className="form-label text-white j-tbl-font-11"
                          >
                            Cuantos cierres
                          </label>
                          <input
                            type="text"
                            className="form-control j-tbl-information-input"
                            id="exampleFormControlInput1"
                            placeholder="1"
                            value={data.filter(item => item.close_amount !== null).length}
                            readOnly
                          />
                        </div>
                      </div>
                    </form>
                  </div>



























  


